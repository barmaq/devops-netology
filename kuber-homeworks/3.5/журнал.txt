этапы проверки api
kubectl get nodes

systemctl status kubelet
systemctl status docker
systemctl status containerd
kubectl cluster-info dump
systemctl status etcd

с подами 
kubectl get pods
kubectl describe pod <name>

логи
journalctl -u kubelet
journalctl -u containerd

логи системы
less /var/log/kube-apiserver.log
less /var/log/kube-sheduler.log
less /var/log/kube-controller-manager.log


логи системных подов
через 
kubectl logs 


инструменты
Lens


деплои делать при помощи helm!

------

kubectl apply -f ./files/task.yaml


busybox и находятся в разных неймспейсах
предполаем что так и задуманно.

создаем неймпспейсы 

kubectl create namespace web
kubectl create namespace data

но тогда в deployment web-consumer вместо 
curl auth-db
нужно указывать 
curl auth-db.data.svc.cluster.local
т е FQDN 

проверяем прямо на запущенном поде

kubectl exec -it web-consumer-5f5b45b976-pscgf -n web -- /bin/bash
nslookup auth-db

не может зарезолвиться
nslookup auth-db.data.svc.cluster.local
работает!


меняем команду curl в манифесте на вариант с FQDN, применяем
kubectl apply -f ./files/task.yaml 

проверяем на наличие проблем
kubectl.exe logs pod/web-consumer-667db765d5-nn945 -n web

видим что все отлично!

PS.  лично для себя - лучше бы поменял имя сервиса. чтобы они не совпадал с именем Deployment.
хоть это позволительно в даной ситуации ( ресурсы разные ), но неудобно. удобнее  было бы назвать сервис auth-db-svc

